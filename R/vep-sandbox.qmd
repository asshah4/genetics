---
title: Example of Variant Annotation and Filtering
subtitle: Using EnsemblVEP
---

We will take a raw VCF file, such as the one below

```{r}
vcf_path <- fs::path("../data/Broad-AF-UIC-Cases-UIC0002.vcf")
```

This will allow the VCF file to be addended on to the pre-existing VCF essentially, with a new column of all the __consequences__ which are the results of the VEP analysis. 

```{bash}	
#| eval: false
vep --offline --vcf --input_file ../data/Broad-AF-UIC-Cases-UIC0002.vcf --output_file ../data/sample-vep.vcf  --everything
```

This can also be done in the form of a text file which has more "columnar" data for the consequences.

```{bash}	
#| eval: false
vep -i ../data/Broad-AF-UIC-Cases-UIC0002.vcf -o ../data/sample-vep.txt --offline --everything --fork 4
```

Both of these types of files that are direct outputs of the `vep` command can be filtered afterwards. This filtering process, using the `filter_vep` command, is done __after__ any plugins or additional annotation of consequences is done.

```{bash}
#| eval: false
filter_vep -i sample-vep.txt -o sample-filter.txt -filter "SYMBOL is TTN and SIFT != tolerated and PolyPhen != benign" --force
```

```{bash}
#| eval: false
vep -i Broad-AF-UIC-Cases-UIC0002.vcf -o sample-loftee.txt --fork 4 --plugin LoF,loftee_path:/Users/asshah4/tools/loftee/,human_ancestor_fa:false --dir_plugin /Users/asshah4/tools/loftee/
```

```{bash}
vep -i Broad-AF-UIC-Cases-UIC0002.vcf -o STDOUT --no_stats --cache --force --everything --plugin LoF,loftee_path:/Users/asshah4/tools/loftee/ --dir_plugins /Users/asshah4/tools/loftee/ | filter_vep -filter "SYMBOL is TTN and LoF" -o sample-loftee-ttn.txt --force
```
